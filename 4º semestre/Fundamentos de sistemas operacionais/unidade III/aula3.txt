
>> Troca de mensagens <<

- Semáforos e monitores não permitem a troca de informações entre máquinas, que é o primordial no mundo dos sitemas distribuídos, Para essa condição, temos a troca de mensagens, que usa dois instrumentos: envio e recebimento, que devem ser colocados em rotinas de biblioteca.

- Num ambiente de rede, um dos principais problemas é a perda de pacotes causados por algum motivador que estaremos nos abstraindo neste material de Fundamentos de Sistemas Operacionais.

- No caso da troca de mensagens entre máquinas, isso se dá por meio da rede e, como apresentado, essa mensagem pode ser extraviada ao longo do percurso.


>> Escalonamento <<

- Quando temos uma única CPU, ou uma única CPU disponível entra as diversas existentes no sistema, e mais de um processo estiver competindo para ser executado, então, caberá ao sistema operacional escolher qual dos processos será provilegiado e essa escolha chama-se algorítmo de escalonamento.

- Em linhas gerais, o escalonamento é importante porque, dentre vários processos, é saudável que o sistema priorize aqueles que vão gerar mais impacto ao ambiente e seus usuários, caso não forem privilegiados durante a escolha de quem deve ser o próximo a ser processado.

- Entre os processos, temos aqueles que passa a maior parte do tempo computando,  computer bound (limitados pela CPU), enquanto outros passam a maior parte do tempo esperando por entrada e saída, I/O bound (limitados a entrada e a saída).

- Devemos escalonar os processo em quatro situações descritas na sequência:

1 - Quando temos os processos pai e filho para serem executados. A definição de qual deve ser priorizado, em muitos casos, é essencial para o perfeito funcionamento das tarefas e do resultado correto.

2 - Quando temos um processo que terminou e já não está mais no sistema, há a necessidade da escolha de um novo processo e, portanto, o escalonamento, nessa situação, faz-se necessário.

3 - Quando um processo é bloqueado por alguma razão, então, outro processo deve ser selecionado para ser executado. Processos predecessores podem ser priorizados, pois, se forem executados os sucessores, pode haver dependências que irão gerar resultados inconsistentes.

4 - Ao ocorrer uma interrupção de E/S, pode ser necessária uma decisão de escalonamento. Os algorítmos de escalonamento podem trabalhar tipicamente de duas formas: não antecipado e antecipado.

- No primeiro caso o processo "não antecipado" pode ficar executando pelo tempo que for necessário, ou seja, por horas até qe seja bloqueado ou até que libere a CPU.

- No segundo, o algorítmo de escalonamento antecipado escolhe um processo e o deixa em execução por tempo máximo fixado.


>> Introdução a gerenciamento de memória <<

- Até, aproximadamente, o primeiro quarto dos anos 2000, as memórias RAM (também conhecidas como memória principal) eram extremamente caras. Ficávamos completamente pasmos se comparássemos percentualmente o valor dos pentes de memória em relação ao valor total do computador.

- Porém já tivemos dias piores. Nos anos 1960, mesmo os maiores computadores do mundo possuíam cada um algo que faria com que eles parecessem uma bica d'água e nossos computadores de mão, um rio amazonas.

- E como era possível termos programas tão eficientes com tão pouca memória? Na realidade, a resposta é dividida em duas partes. A primeira é que o programador daquela época também conhecia as entranhas do computador e programar era algo que exigia mais do que conhecimentos da linguagem de programação versus a necessidade de negócio que estava motivando aquele projeto.

- Por isso, o programador, tipicamente, tinha que tirar "leite de pedra". A outra parte da resposta é que não tinhamos múltiplas interfaces entre aplicações em rede, nem ambientes de trabalho com tanta qualidade gráfica, nem mesmo a complexidade que os programas atuais possuem.

- Com o passar do tempo, a hierarquia de memória contribuiu para atender a demanda exponencialmente crescente por memória. Pordemos comparar programas atuais com um camelo que, depois de atravessar o deserto por dias sem beber nenhum gole de qualquer coisa líquida e de uma exaustiva jornada, encontra um tanque d´água (a água seria a memória).

- Não é necessário concluir que, quando houver água disponível, o camelo está consumindo - as aplicações atuas são cada vez mais cedentes por memória.

- No sistema operacional, a parte parcialmente responsável por gerenciar a hierarquia de memória é o gerenciador de memória, que tem como tarefa conhecer todo espaço de memória, alocar para os processos que estão necessitando e liberar as partes que não estão mais em uso pelos processos.

- Conforme demonstrado na imagem, a variação por uso total de memória RAM (Randon Access Memory - memória de acesso randômico), em que o sistema operacional ficará na parte inicial e da memória e o programa do usuário na parte mais elevada.

- O segundo modelo é um mix de dois tipos de memória, sendo o programa do usuário na memória RAM e o sistema operacional contido numa memória ROM (Read Only Memory - Memória exclusiva de leitura) e, como o nome já diz, é somente para leitura, portanto, nesse modelo ná há o risco do usuário ou algum probçema na aplicação comprometer o sistema operacional - tipicamente esse modelo é usado em sistemas portáteis.

- No terceiro caso apresentado, temos o drivers de dispositivos em ROM e programa do usuário e sistema operacionam em RAM.

- Observação: Nos sistemas precursores não era possível mais que um programa ocupando a memória. Se isso ocorresse, causaria problemas aos dois programas, ao que estava na memória e àquele que tentasse fazer uso.

- Com o avanço e a necessidade de múltiplas aplicações em funcionamento simultaneamente, a opção encontrada foi u uso de swapping, ou seja, troca de processos.

- Isso consiste no sistema operacional pegar o conteúdo completo da memória e movê~lo para um arquivo na memória em disco rígido e, subsequentemente, liberar a memória para o próximo processo.

- Entretanto, no hardware também houve avanço que não demandava somente a troca de processos executada por software (pelo sistema operacional).

- Esse processos consiste em dividir a memória principal em blocos de 2 KB com chave de proteção de 4 bits para cada bloco e mantidas em registradores especiais dentro da CPU. Porém, nesse caso da divisão e da memória em blocosm há "um rpblema quando se usa mais de um programa".

- Os dois programas referenciam a mémória física absoluta, enquanto na realidade, queríamos que cada programa referenciasse um conjunto de endereços.

- Portanto, a solução é a ralocação estática ou, em outras palavras, esse mecanismo de rotação visa rotular blocos de memória com uma chave de proteção e comparar a chave do processo em execução com a de cada palavra da memória recuperada.