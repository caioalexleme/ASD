

>> Pilhas <<

- Uma pilha é uma lista linear em que as operações são sempre realizadas pelo topo (Last in First Out - LIFO)

. Operações básicas:
- Empilhar (push) um novo elemento (inserção no topo)
- Desempilhar (pop) um elemento (removendo-o do topo)

- Vamos imaginar uma pilha composta pelos elementos que foram empilhados na ordem A, B, C e D.
*IMAGEM ANEXA 3.1


>> Operações de pilha <<

push(F) - empilha F (1)
push(G) - empilha G (2)
pop() - retorna o elemento G (3)
pop() - retorna o elemento F (4)
pop() - retorna o elemento E (5)
push(I) - empilha I (6)
*IMAGEM ANEXA 3.2


>> Pilhas <<

- A estrutura do nó continua a mesma da lista:

    typedef struct no{
        int info;
        struct no * proximo;
    }No;

- O controle da pilha é feito apontando para o topo, o primeiro nó da lista:

    typedef struct pilha{
        No* topo;
    }Pilha;


>> Criação da pilha com lista <<

- A função main cria um ponteiro p do tipo pilha

    void main(){
        Pilha* p = cria;
        .
        .
    }

    Pilha* cria(void){
        Pilha* nova_pilha = (Pilha*)malloc(sizeof(Pilha));
        nova_pilha->topo = NULL;
        return nova_pilha;
    }


>> inserção de elementos na pilha <<

    void push(Pilha* p, int v){
        p->topo = insere(p->topo, v);
    }

    No* insere(No* lista, int num){
        No* novo_no = (No*)malloc(sizeof(No));
        novo_no->info = num;
        novo_no->proximo = lista;
        return novo_no;
    }
*IMAGEM ANEXA 3.3


>> Remoção da pilha <<

- A rotina de remoção somente acontece pelo topo.

- Ao utilizar a estrutura de lista, somente o primeiro elemento é retirado.

- Dispensa a busca e simplifica muito o mecanismo.

- Inicialmente é previsto verificar se a lista está vazia

- Uma pilha está vazia quando o topo é NULL

    int vazia(Pilha* p){
        return(p->topo == NULL);
    }

- Uma vez verificado que a pilha não está vazia, a variável num recebe o conteúdo do topo.

- A dupla referência p->topo->info obtém a informação que se encontra no lugar para onde o nó do topo está apontando.

    int pop(Pilha *p){
        int num;
        if(vazia(p)){
            printf("Pilha vazia.\n");
            exit(1)
        }
        num = p->topo->info;
        p->topo = retira(p->topo);
        return num;
    }

    No* retira(No*lista){
        No* aux = lista;
        lista = aux->proximo;
        free(aux);
        return lista;
    }


>> Simulação <<

    void main(){
        Pilha* p = cria();
        push(p, 1);
        push(p, 2);
        push(p, 3);
        Pilha* q = cria();
        push(q, 100);
        push(p, 4);
        push(q, 101);
        push(p, 5);
        pop(p);
    }


>> Função de impressão e liberação de memória <<

    void libera(Pilha* p){
        No* q = p->topo;
        while(q != NULL){
            No* t = q->proximo;
            free(q);
            q = t;
        }
        free(p);
    }

    void imprime(Pilha* p){
        No* q;
        for(q = p->topo; q != NULL; q = q->proximo){
            printf("%d\n", q->info);
        }
    }


